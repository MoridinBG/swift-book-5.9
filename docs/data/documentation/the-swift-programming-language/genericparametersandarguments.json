{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"metadata":{"title":"Generic Parameters and Arguments"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"This chapter describes parameters and arguments for generic types, functions, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"type":"text","text":" "},{"text":"you specify the type parameters that the generic type, function, or initializer","type":"text"},{"type":"text","text":" "},{"text":"can work with. These type parameters act as placeholders that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are replaced by actual concrete type arguments when an instance of a generic type is"},{"text":" ","type":"text"},{"text":"created or a generic function or initializer is called.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For an overview of generics in Swift, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Generic-Parameter-Clause","type":"heading","level":2,"text":"Generic Parameter Clause"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"generic parameter clause"}],"type":"emphasis"},{"text":" specifies the type parameters of a generic","type":"text"},{"text":" ","type":"text"},{"text":"type or function, along with any associated constraints and requirements on those parameters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A generic parameter clause is enclosed in angle brackets (<>)"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}]},{"code":["<<#generic parameter list#>>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter list"}]},{"type":"text","text":" is a comma-separated list of generic parameters,"},{"text":" ","type":"text"},{"type":"text","text":"each of which has the following form:"}]},{"code":["<#type parameter#>: <#constraint#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A generic parameter consists of a ","type":"text"},{"inlineContent":[{"type":"text","text":"type parameter"}],"type":"emphasis"},{"type":"text","text":" followed by"},{"type":"text","text":" "},{"text":"an optional ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constraint","type":"text"}]},{"text":". A ","type":"text"},{"inlineContent":[{"type":"text","text":"type parameter"}],"type":"emphasis"},{"type":"text","text":" is simply the name"},{"text":" ","type":"text"},{"type":"text","text":"of a placeholder type"},{"type":"text","text":" "},{"text":"(for example, ","type":"text"},{"type":"codeVoice","code":"T"},{"text":", ","type":"text"},{"type":"codeVoice","code":"U"},{"type":"text","text":", "},{"type":"codeVoice","code":"V"},{"type":"text","text":", "},{"code":"Key","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":", and so on).","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You have access to the type parameters (and any of their associated types) in the rest of the"},{"type":"text","text":" "},{"type":"text","text":"type, function, or initializer declaration, including in the signature of the function"},{"text":" ","type":"text"},{"text":"or initializer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"constraint","type":"text"}],"type":"emphasis"},{"type":"text","text":" specifies that a type parameter inherits"},{"type":"text","text":" "},{"text":"from a specific class or conforms to a protocol or protocol composition.","type":"text"},{"type":"text","text":" "},{"text":"For example, in the generic function below, the generic parameter ","type":"text"},{"type":"codeVoice","code":"T: Comparable"},{"type":"text","text":" "},{"type":"text","text":"indicates that any type argument substituted"},{"text":" ","type":"text"},{"type":"text","text":"for the type parameter "},{"type":"codeVoice","code":"T"},{"type":"text","text":" must conform to the "},{"code":"Comparable","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"]},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":", for example, both conform to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"text":"this function accepts arguments of either type. In contrast with generic types, you don’t","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specify a generic argument clause when you use a generic function or initializer."},{"type":"text","text":" "},{"text":"The type arguments are instead inferred from the type of the arguments passed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the function or initializer."}]},{"type":"codeListing","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"],"syntax":"swift"},{"type":"heading","level":3,"text":"Generic Where Clauses","anchor":"Generic-Where-Clauses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can specify additional requirements on type parameters and their associated types"},{"type":"text","text":" "},{"text":"by including a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause right before the opening curly brace"},{"type":"text","text":" "},{"type":"text","text":"of a type or function’s body."},{"type":"text","text":" "},{"type":"text","text":"A generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause consists of the "},{"type":"codeVoice","code":"where"},{"type":"text","text":" keyword,"},{"text":" ","type":"text"},{"type":"text","text":"followed by a comma-separated list of one or more "},{"type":"emphasis","inlineContent":[{"text":"requirements","type":"text"}]},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["where <#requirements#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"type":"text","text":" in a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause specify that a type parameter inherits from"},{"type":"text","text":" "},{"text":"a class or conforms to a protocol or protocol composition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Although the generic "},{"type":"codeVoice","code":"where"},{"text":" clause provides syntactic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sugar for expressing simple constraints on type parameters"},{"type":"text","text":" "},{"type":"text","text":"(for example, "},{"code":"<T: Comparable>","type":"codeVoice"},{"type":"text","text":" is equivalent to "},{"type":"codeVoice","code":"<T> where T: Comparable"},{"type":"text","text":" and so on),"},{"type":"text","text":" "},{"text":"you can use it to provide more complex constraints on type parameters","type":"text"},{"text":" ","type":"text"},{"text":"and their associated types. For example,","type":"text"},{"type":"text","text":" "},{"text":"you can constrain the associated types of type parameters to conform to protocols.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, "},{"code":"<S: Sequence> where S.Iterator.Element: Equatable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"specifies that "},{"type":"codeVoice","code":"S"},{"text":" conforms to the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"and that the associated type "},{"code":"S.Iterator.Element","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"conforms to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"text":"This constraint ensures that each element of the sequence is equatable.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also specify the requirement that two types be identical,"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. For example,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element"},{"type":"text","text":" "},{"type":"text","text":"expresses the constraints that "},{"code":"S1","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"S2"},{"type":"text","text":" conform to the "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"and that the elements of both sequences must be of the same type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type argument substituted for a type parameter must"},{"type":"text","text":" "},{"type":"text","text":"meet all the constraints and requirements placed on the type parameter."}]},{"inlineContent":[{"type":"text","text":"A generic "},{"code":"where","type":"codeVoice"},{"text":" clause can appear","type":"text"},{"text":" ","type":"text"},{"text":"as part of a declaration that includes type parameters,","type":"text"},{"type":"text","text":" "},{"text":"or as part of a declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s nested inside of a declaration that includes type parameters."},{"text":" ","type":"text"},{"type":"text","text":"The generic "},{"type":"codeVoice","code":"where"},{"text":" clause for a nested declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can still refer to the type parameters of the enclosing declaration;"},{"type":"text","text":" "},{"text":"however,","type":"text"},{"type":"text","text":" "},{"text":"the requirements from that ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"apply only to the declaration where it’s written.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the enclosing declaration also has a "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"text":"the requirements from both clauses are combined.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example below, "},{"type":"codeVoice","code":"startsWithZero()"},{"type":"text","text":" is available"},{"text":" ","type":"text"},{"type":"text","text":"only if "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to both "},{"type":"codeVoice","code":"SomeProtocol"},{"text":" and ","type":"text"},{"code":"Numeric","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can overload a generic function or initializer by providing different"},{"type":"text","text":" "},{"type":"text","text":"constraints, requirements, or both on the type parameters."},{"text":" ","type":"text"},{"type":"text","text":"When you call an overloaded generic function or initializer,"},{"type":"text","text":" "},{"text":"the compiler uses these constraints to resolve which overloaded function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or initializer to invoke."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about generic "},{"code":"where","type":"codeVoice"},{"text":" clauses and to see an example","type":"text"},{"text":" ","type":"text"},{"text":"of one in a generic function declaration,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"reference","isActive":true},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"<"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-list"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":">","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-parameter-list"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-parameter-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol-composition-type"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-where-clause"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"where","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement-list","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"requirement-list","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"conformance-requirement"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"same-type-requirement","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"conformance-requirement","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"same-type-requirement"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"=="}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"style":"note","name":"Grammar of a generic parameter clause","type":"aside"},{"anchor":"Generic-Argument-Clause","level":2,"type":"heading","text":"Generic Argument Clause"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"generic argument clause","type":"text"}],"type":"emphasis"},{"text":" specifies the type arguments of a generic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."},{"type":"text","text":" "},{"text":"A generic argument clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["<<#generic argument list#>>"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"generic argument list"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of type arguments."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"type argument","type":"text"}]},{"type":"text","text":" is the name of an actual concrete type that replaces"},{"text":" ","type":"text"},{"text":"a corresponding type parameter in the generic parameter clause of a generic type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The result is a specialized version of that generic type."},{"type":"text","text":" "},{"type":"text","text":"The example below shows a simplified version of the Swift standard library’s"},{"type":"text","text":" "},{"type":"text","text":"generic dictionary type."}]},{"type":"codeListing","code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"],"syntax":"swift"},{"inlineContent":[{"text":"The specialized version of the generic ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type, "},{"code":"Dictionary<String, Int>","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is formed by replacing the generic parameters ","type":"text"},{"code":"Key: Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"with the concrete type arguments "},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":". Each type argument must satisfy","type":"text"},{"type":"text","text":" "},{"text":"all the constraints of the generic parameter it replaces, including any additional","type":"text"},{"type":"text","text":" "},{"text":"requirements specified in a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause. In the example above,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Key"},{"text":" type parameter is constrained to conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"text":"and therefore ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" must also conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also replace a type parameter with a type argument that’s itself"},{"type":"text","text":" "},{"type":"text","text":"a specialized version of a generic type (provided it satisfies the appropriate"},{"text":" ","type":"text"},{"text":"constraints and requirements). For example, you can replace the type parameter","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":" with a specialized version of an array, "},{"code":"Array<Int>","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to form an array whose elements are themselves arrays of integers.","type":"text"}]},{"code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"As mentioned in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you don’t use a generic argument clause to specify the type arguments"},{"type":"text","text":" "},{"text":"of a generic function or initializer.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"generic-argument-clause"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"<","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"code":">","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"generic-argument","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]}],"type":"paragraph"}],"name":"Grammar of a generic argument clause","type":"aside"}]}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","title":"Generic Where Clauses","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"abstract":[{"text":"Write code that works for multiple types and specify requirements for those types.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/generics","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","title":"Generics","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause":{"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause","abstract":[],"kind":"section","title":"Generic Parameter Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","url":"\/documentation\/the-swift-programming-language","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)"}}}