{"abstract":[{"text":"Access members of an optional value without unwrapping.","type":"text"}],"sections":[],"metadata":{"title":"Optional Chaining"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"type":"text","text":" is a process for querying and calling"},{"text":" ","type":"text"},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"text":", the property, method, or subscript call returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Optional chaining in Swift is similar to messaging "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" in Objective-C,"},{"type":"text","text":" "},{"text":"but in a way that works for any type, and that can be checked for success or failure.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"level":2,"type":"heading","anchor":"Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","text":"Optional Chaining as an Alternative to Forced Unwrapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You specify optional chaining by placing a question mark ("},{"type":"codeVoice","code":"?"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"after the optional value on which you wish to call a property, method or subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if the optional is non-"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is very similar to placing an exclamation point ("},{"code":"!","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"after an optional value to force the unwrapping of its value.","type":"text"},{"type":"text","text":" "},{"text":"The main difference is that optional chaining fails gracefully when the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"whereas forced unwrapping triggers a runtime error when the optional is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"To reflect the fact that optional chaining can be called on a "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"the result of an optional chaining call is always an optional value,"},{"type":"text","text":" "},{"type":"text","text":"even if the property, method, or subscript you are querying returns a non-optional value."},{"text":" ","type":"text"},{"type":"text","text":"You can use this optional return value to check whether"},{"text":" ","type":"text"},{"type":"text","text":"the optional chaining call was successful"},{"type":"text","text":" "},{"text":"(the returned optional contains a value),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or didn’t succeed due to a "},{"type":"codeVoice","code":"nil"},{"text":" value in the chain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(the returned optional value is "},{"type":"codeVoice","code":"nil"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Specifically, the result of an optional chaining call","type":"text"},{"type":"text","text":" "},{"text":"is of the same type as the expected return value, but wrapped in an optional.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A property that normally returns an "},{"code":"Int","type":"codeVoice"},{"text":" will return an ","type":"text"},{"type":"codeVoice","code":"Int?"},{"text":" ","type":"text"},{"text":"when accessed through optional chaining.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The next several code snippets demonstrate","type":"text"},{"text":" ","type":"text"},{"text":"how optional chaining differs from forced unwrapping","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and enables you to check for success."}]},{"type":"paragraph","inlineContent":[{"text":"First, two classes called ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" are defined:"}]},{"type":"codeListing","code":["class Person {","    var residence: Residence?","}","","class Residence {","    var numberOfRooms = 1","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Residence"},{"text":" instances have a single ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instances have an optional "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"Residence?"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"If you create a new ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"its ","type":"text"},{"type":"codeVoice","code":"residence"},{"text":" property is default initialized to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"by virtue of being optional."},{"type":"text","text":" "},{"type":"text","text":"In the code below, "},{"type":"codeVoice","code":"john"},{"type":"text","text":" has a "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" property value of "},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let john = Person()"],"type":"codeListing"},{"inlineContent":[{"text":"If you try to access the ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" property of this person’s "},{"type":"codeVoice","code":"residence"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by placing an exclamation point after "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" to force the unwrapping of its value,"},{"type":"text","text":" "},{"type":"text","text":"you trigger a runtime error,"},{"type":"text","text":" "},{"type":"text","text":"because there’s no "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" value to unwrap:"}],"type":"paragraph"},{"code":["let roomCount = john.residence!.numberOfRooms","\/\/ this triggers a runtime error"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The code above succeeds when "},{"code":"john.residence","type":"codeVoice"},{"text":" has a non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"text":"and will set ","type":"text"},{"code":"roomCount","type":"codeVoice"},{"text":" to an ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value containing the appropriate number of rooms.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, this code always triggers a runtime error when "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as illustrated above."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional chaining provides an alternative way to access the value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"To use optional chaining, use a question mark in place of the exclamation point:","type":"text"}]},{"syntax":"swift","code":["if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This tells Swift to “chain” on the optional ","type":"text"},{"code":"residence","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"and to retrieve the value of ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" if "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" exists."}]},{"type":"paragraph","inlineContent":[{"text":"Because the attempt to access ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":" has the potential to fail,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the optional chaining attempt returns a value of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", or “optional "},{"code":"Int","type":"codeVoice"},{"text":"”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When "},{"code":"residence","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", as in the example above,","type":"text"},{"type":"text","text":" "},{"text":"this optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" will also be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to reflect the fact that it was not possible to access ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The optional "},{"code":"Int","type":"codeVoice"},{"text":" is accessed through optional binding","type":"text"},{"type":"text","text":" "},{"text":"to unwrap the integer and assign the non-optional value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"roomCount"},{"text":" constant.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this is true even though "},{"type":"codeVoice","code":"numberOfRooms"},{"text":" is a non-optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The fact that it’s queried through an optional chain","type":"text"},{"text":" ","type":"text"},{"text":"means that the call to ","type":"text"},{"code":"numberOfRooms","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"will always return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" instead of an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"You can assign a ","type":"text"},{"code":"Residence","type":"codeVoice"},{"type":"text","text":" instance to "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so that it no longer has a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["john.residence = Residence()"]},{"inlineContent":[{"type":"codeVoice","code":"john.residence"},{"text":" now contains an actual ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" instance, rather than ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you try to access "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" with the same optional chaining as before,"},{"text":" ","type":"text"},{"type":"text","text":"it will now return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" that contains"},{"text":" ","type":"text"},{"type":"text","text":"the default "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"John's residence has 1 room(s).\""],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Defining Model Classes for Optional Chaining","level":2,"anchor":"Defining-Model-Classes-for-Optional-Chaining"},{"type":"paragraph","inlineContent":[{"text":"You can use optional chaining with calls to properties, methods, and subscripts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are more than one level deep."},{"type":"text","text":" "},{"type":"text","text":"This enables you to drill down into subproperties"},{"text":" ","type":"text"},{"type":"text","text":"within complex models of interrelated types,"},{"type":"text","text":" "},{"type":"text","text":"and to check whether it’s possible to access"},{"text":" ","type":"text"},{"type":"text","text":"properties, methods, and subscripts on those subproperties."}]},{"type":"paragraph","inlineContent":[{"text":"The code snippets below define four model classes","type":"text"},{"text":" ","type":"text"},{"text":"for use in several subsequent examples,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including examples of multilevel optional chaining."},{"text":" ","type":"text"},{"type":"text","text":"These classes expand upon the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"code":"Residence","type":"codeVoice"},{"text":" model from above","type":"text"},{"text":" ","type":"text"},{"text":"by adding a ","type":"text"},{"code":"Room","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Address","type":"codeVoice"},{"type":"text","text":" class,"},{"text":" ","type":"text"},{"type":"text","text":"with associated properties, methods, and subscripts."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" class is defined in the same way as before:","type":"text"}],"type":"paragraph"},{"code":["class Person {","    var residence: Residence?","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" class is more complex than before.","type":"text"},{"type":"text","text":" "},{"text":"This time, the ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" class defines a variable property called ","type":"text"},{"type":"codeVoice","code":"rooms"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is initialized with an empty array of type "},{"code":"[Room]","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Residence {","    var rooms: [Room] = []","    var numberOfRooms: Int {","        return rooms.count","    }","    subscript(i: Int) -> Room {","        get {","            return rooms[i]","        }","        set {","            rooms[i] = newValue","        }","    }","    func printNumberOfRooms() {","        print(\"The number of rooms is \\(numberOfRooms)\")","    }","    var address: Address?","}"]},{"inlineContent":[{"text":"Because this version of ","type":"text"},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" stores an array of "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" instances,"},{"text":" ","type":"text"},{"text":"its ","type":"text"},{"code":"numberOfRooms","type":"codeVoice"},{"text":" property is implemented as a computed property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not a stored property."},{"type":"text","text":" "},{"type":"text","text":"The computed "},{"code":"numberOfRooms","type":"codeVoice"},{"type":"text","text":" property simply returns"},{"text":" ","type":"text"},{"type":"text","text":"the value of the "},{"code":"count","type":"codeVoice"},{"text":" property from the ","type":"text"},{"type":"codeVoice","code":"rooms"},{"text":" array.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a shortcut to accessing its "},{"type":"codeVoice","code":"rooms"},{"text":" array,","type":"text"},{"type":"text","text":" "},{"text":"this version of ","type":"text"},{"code":"Residence","type":"codeVoice"},{"type":"text","text":" provides a read-write subscript that provides access to"},{"text":" ","type":"text"},{"text":"the room at the requested index in the ","type":"text"},{"type":"codeVoice","code":"rooms"},{"text":" array.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This version of "},{"type":"codeVoice","code":"Residence"},{"text":" also provides a method called ","type":"text"},{"type":"codeVoice","code":"printNumberOfRooms"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which simply prints the number of rooms in the residence.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, "},{"type":"codeVoice","code":"Residence"},{"text":" defines an optional property called ","type":"text"},{"type":"codeVoice","code":"address"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a type of "},{"type":"codeVoice","code":"Address?"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"Address","type":"codeVoice"},{"type":"text","text":" class type for this property is defined below."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Room"},{"text":" class used for the ","type":"text"},{"code":"rooms","type":"codeVoice"},{"type":"text","text":" array is"},{"type":"text","text":" "},{"type":"text","text":"a simple class with one property called "},{"code":"name","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and an initializer to set that property to a suitable room name:","type":"text"}],"type":"paragraph"},{"code":["class Room {","    let name: String","    init(name: String) { self.name = name }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final class in this model is called "},{"type":"codeVoice","code":"Address"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This class has three optional properties of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The first two properties, "},{"code":"buildingName","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"buildingNumber"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"are alternative ways to identify a particular building as part of an address.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The third property, "},{"type":"codeVoice","code":"street"},{"text":", is used to name the street for that address:","type":"text"}]},{"type":"codeListing","code":["class Address {","    var buildingName: String?","    var buildingNumber: String?","    var street: String?","    func buildingIdentifier() -> String? {","        if let buildingNumber = buildingNumber, let street = street {","            return \"\\(buildingNumber) \\(street)\"","        } else if buildingName != nil {","            return buildingName","        } else {","            return nil","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class also provides a method called "},{"code":"buildingIdentifier()","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which has a return type of "},{"type":"codeVoice","code":"String?"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This method checks the properties of the address"},{"type":"text","text":" "},{"text":"and returns ","type":"text"},{"type":"codeVoice","code":"buildingName"},{"type":"text","text":" if it has a value,"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"code":"buildingNumber","type":"codeVoice"},{"type":"text","text":" concatenated with "},{"code":"street","type":"codeVoice"},{"type":"text","text":" if both have values,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" otherwise."}],"type":"paragraph"},{"anchor":"Accessing-Properties-Through-Optional-Chaining","type":"heading","level":2,"text":"Accessing Properties Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As demonstrated in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","isActive":true,"type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you can use optional chaining to access a property on an optional value,"},{"type":"text","text":" "},{"text":"and to check if that property access is successful.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the classes defined above to create a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"and try to access its ","type":"text"},{"code":"numberOfRooms","type":"codeVoice"},{"type":"text","text":" property as before:"}]},{"type":"codeListing","code":["let john = Person()","if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"john.residence","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"this optional chaining call fails in the same way as before.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also attempt to set a property’s value through optional chaining:"}]},{"code":["let someAddress = Address()","someAddress.buildingNumber = \"29\"","someAddress.street = \"Acacia Road\"","john.residence?.address = someAddress"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" property of "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" will fail,"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"john.residence"},{"text":" is currently ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The assignment is part of the optional chaining,","type":"text"},{"text":" ","type":"text"},{"text":"which means none of the code on the right-hand side of the ","type":"text"},{"type":"codeVoice","code":"="},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is evaluated."},{"type":"text","text":" "},{"text":"In the previous example,","type":"text"},{"text":" ","type":"text"},{"text":"it’s not easy to see that ","type":"text"},{"type":"codeVoice","code":"someAddress"},{"text":" is never evaluated,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because accessing a constant doesn’t have any side effects."},{"type":"text","text":" "},{"type":"text","text":"The listing below does the same assignment,"},{"type":"text","text":" "},{"type":"text","text":"but it uses a function to create the address."},{"text":" ","type":"text"},{"text":"The function prints “Function was called” before returning a value,","type":"text"},{"text":" ","type":"text"},{"text":"which lets you see","type":"text"},{"text":" ","type":"text"},{"text":"whether the right-hand side of the ","type":"text"},{"code":"=","type":"codeVoice"},{"type":"text","text":" operator was evaluated."}]},{"type":"codeListing","syntax":"swift","code":["func createAddress() -> Address {","    print(\"Function was called.\")","","    let someAddress = Address()","    someAddress.buildingNumber = \"29\"","    someAddress.street = \"Acacia Road\"","","    return someAddress","}","john.residence?.address = createAddress()"]},{"inlineContent":[{"text":"You can tell that the ","type":"text"},{"code":"createAddress()","type":"codeVoice"},{"text":" function isn’t called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because nothing is printed."}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Calling-Methods-Through-Optional-Chaining","text":"Calling Methods Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining to call a method on an optional value,"},{"text":" ","type":"text"},{"type":"text","text":"and to check whether that method call is successful."},{"type":"text","text":" "},{"type":"text","text":"You can do this even if that method doesn’t define a return value."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"printNumberOfRooms()","type":"codeVoice"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"Residence"},{"text":" class","type":"text"},{"type":"text","text":" "},{"text":"prints the current value of ","type":"text"},{"code":"numberOfRooms","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Here’s how the method looks:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func printNumberOfRooms() {","    print(\"The number of rooms is \\(numberOfRooms)\")","}"]},{"inlineContent":[{"text":"This method doesn’t specify a return type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, functions and methods with no return type have an implicit return type of "},{"type":"codeVoice","code":"Void"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values","type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This means that they return a value of "},{"type":"codeVoice","code":"()"},{"type":"text","text":", or an empty tuple."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you call this method on an optional value with optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"the method’s return type will be "},{"type":"codeVoice","code":"Void?"},{"text":", not ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because return values are always of an optional type when called through optional chaining."},{"type":"text","text":" "},{"text":"This enables you to use an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to check whether it was possible to call the "},{"code":"printNumberOfRooms()","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"even though the method doesn’t itself define a return value."},{"text":" ","type":"text"},{"text":"Compare the return value from the ","type":"text"},{"type":"codeVoice","code":"printNumberOfRooms"},{"type":"text","text":" call against "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"to see if the method call was successful:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if john.residence?.printNumberOfRooms() != nil {","    print(\"It was possible to print the number of rooms.\")","} else {","    print(\"It was not possible to print the number of rooms.\")","}","\/\/ Prints \"It was not possible to print the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same is true if you attempt to set a property through optional chaining."},{"type":"text","text":" "},{"type":"text","text":"The example above in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"attempts to set an "},{"type":"codeVoice","code":"address"},{"type":"text","text":" value for "},{"type":"codeVoice","code":"john.residence"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though the "},{"type":"codeVoice","code":"residence"},{"text":" property is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to set a property through optional chaining returns a value of type "},{"type":"codeVoice","code":"Void?"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which enables you to compare against "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to see if the property was set successfully:"}]},{"syntax":"swift","code":["if (john.residence?.address = someAddress) != nil {","    print(\"It was possible to set the address.\")","} else {","    print(\"It was not possible to set the address.\")","}","\/\/ Prints \"It was not possible to set the address.\""],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Accessing-Subscripts-Through-Optional-Chaining","text":"Accessing Subscripts Through Optional Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining to try to retrieve and set"},{"text":" ","type":"text"},{"text":"a value from a subscript on an optional value,","type":"text"},{"text":" ","type":"text"},{"text":"and to check whether that subscript call is successful.","type":"text"}]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you access a subscript on an optional value through optional chaining,"},{"text":" ","type":"text"},{"type":"text","text":"you place the question mark "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" the subscript’s brackets, not after."},{"text":" ","type":"text"},{"text":"The optional chaining question mark always follows immediately after","type":"text"},{"type":"text","text":" "},{"text":"the part of the expression that’s optional.","type":"text"}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"The example below tries to retrieve the name of","type":"text"},{"text":" ","type":"text"},{"text":"the first room in the ","type":"text"},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array of the "},{"type":"codeVoice","code":"john.residence"},{"text":" property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the subscript defined on the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"code":"john.residence","type":"codeVoice"},{"text":" is currently ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the subscript call fails:"}]},{"type":"codeListing","syntax":"swift","code":["if let firstRoomName = john.residence?[0].name {","    print(\"The first room name is \\(firstRoomName).\")","} else {","    print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"Unable to retrieve the first room name.\""]},{"type":"paragraph","inlineContent":[{"text":"The optional chaining question mark in this subscript call","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is placed immediately after "},{"type":"codeVoice","code":"john.residence"},{"text":", before the subscript brackets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" is the optional value"},{"text":" ","type":"text"},{"type":"text","text":"on which optional chaining is being attempted."}]},{"inlineContent":[{"type":"text","text":"Similarly, you can try to set a new value through a subscript with optional chaining:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["john.residence?[0] = Room(name: \"Bathroom\")"]},{"inlineContent":[{"type":"text","text":"This subscript setting attempt also fails, because "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create and assign an actual "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance to "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with one or more ","type":"text"},{"code":"Room","type":"codeVoice"},{"type":"text","text":" instances in its "},{"code":"rooms","type":"codeVoice"},{"text":" array,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can use the "},{"code":"Residence","type":"codeVoice"},{"text":" subscript to access","type":"text"},{"type":"text","text":" "},{"text":"the actual items in the ","type":"text"},{"type":"codeVoice","code":"rooms"},{"type":"text","text":" array through optional chaining:"}],"type":"paragraph"},{"code":["let johnsHouse = Residence()","johnsHouse.rooms.append(Room(name: \"Living Room\"))","johnsHouse.rooms.append(Room(name: \"Kitchen\"))","john.residence = johnsHouse","","if let firstRoomName = john.residence?[0].name {","    print(\"The first room name is \\(firstRoomName).\")","} else {","    print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"The first room name is Living Room.\""],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Accessing-Subscripts-of-Optional-Type","level":3,"text":"Accessing Subscripts of Optional Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a subscript returns a value of optional type —"},{"text":" ","type":"text"},{"type":"text","text":"such as the key subscript of Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type —"},{"type":"text","text":" "},{"text":"place a question mark ","type":"text"},{"inlineContent":[{"text":"after","type":"text"}],"type":"emphasis"},{"text":" the subscript’s closing bracket","type":"text"},{"type":"text","text":" "},{"text":"to chain on its optional return value:","type":"text"}]},{"code":["var testScores = [\"Dave\": [86, 82, 84], \"Bev\": [79, 94, 81]]","testScores[\"Dave\"]?[0] = 91","testScores[\"Bev\"]?[0] += 1","testScores[\"Brian\"]?[0] = 72","\/\/ the \"Dave\" array is now [91, 82, 84] and the \"Bev\" array is now [80, 94, 81]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The example above defines a dictionary called "},{"type":"codeVoice","code":"testScores"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which contains two key-value pairs that map a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" key to an array of "},{"type":"codeVoice","code":"Int"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example uses optional chaining to set the first item in the "},{"code":"\"Dave\"","type":"codeVoice"},{"text":" array to ","type":"text"},{"code":"91","type":"codeVoice"},{"text":";","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to increment the first item in the "},{"type":"codeVoice","code":"\"Bev\""},{"text":" array by ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":";"},{"text":" ","type":"text"},{"text":"and to try to set the first item in an array for a key of ","type":"text"},{"type":"codeVoice","code":"\"Brian\""},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The first two calls succeed, because the "},{"code":"testScores","type":"codeVoice"},{"type":"text","text":" dictionary"},{"type":"text","text":" "},{"text":"contains keys for ","type":"text"},{"code":"\"Dave\"","type":"codeVoice"},{"type":"text","text":" and "},{"code":"\"Bev\"","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The third call fails, because the ","type":"text"},{"type":"codeVoice","code":"testScores"},{"text":" dictionary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t contain a key for "},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Linking Multiple Levels of Chaining","anchor":"Linking-Multiple-Levels-of-Chaining","level":2},{"inlineContent":[{"type":"text","text":"You can link together multiple levels of optional chaining"},{"type":"text","text":" "},{"text":"to drill down to properties, methods, and subscripts deeper within a model.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, multiple levels of optional chaining"},{"type":"text","text":" "},{"type":"text","text":"don’t add more levels of optionality to the returned value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To put it another way:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the type you are trying to retrieve isn’t optional,","type":"text"},{"type":"text","text":" "},{"text":"it will become optional because of the optional chaining.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the type you are trying to retrieve is "},{"type":"emphasis","inlineContent":[{"text":"already","type":"text"}]},{"type":"text","text":" optional,"},{"type":"text","text":" "},{"type":"text","text":"it will not become "},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"type":"text","text":" optional because of the chaining."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Therefore:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If you try to retrieve an ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value through optional chaining,"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"text":"no matter how many levels of chaining are used.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, if you try to retrieve an ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":" value through optional chaining,","type":"text"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"code":"Int?","type":"codeVoice"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many levels of chaining are used."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The example below tries to access the ","type":"text"},{"code":"street","type":"codeVoice"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property of "},{"code":"john","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"There are ","type":"text"},{"inlineContent":[{"type":"text","text":"two"}],"type":"emphasis"},{"text":" levels of optional chaining in use here,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to chain through the "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"address"},{"text":" properties,","type":"text"},{"type":"text","text":" "},{"text":"both of which are of optional type:","type":"text"}],"type":"paragraph"},{"code":["if let johnsStreet = john.residence?.address?.street {","    print(\"John's street name is \\(johnsStreet).\")","} else {","    print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"Unable to retrieve the address.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The value of ","type":"text"},{"type":"codeVoice","code":"john.residence"},{"text":" currently contains a valid ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, the value of "},{"type":"codeVoice","code":"john.residence.address"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because of this, the call to ","type":"text"},{"code":"john.residence?.address?.street","type":"codeVoice"},{"type":"text","text":" fails."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note that in the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you are trying to retrieve the value of the "},{"code":"street","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The type of this property is ","type":"text"},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The return value of "},{"type":"codeVoice","code":"john.residence?.address?.street"},{"type":"text","text":" is therefore also "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even though two levels of optional chaining are applied in addition to"},{"text":" ","type":"text"},{"type":"text","text":"the underlying optional type of the property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you set an actual "},{"type":"codeVoice","code":"Address"},{"text":" instance as the value for ","type":"text"},{"type":"codeVoice","code":"john.residence.address"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and set an actual value for the address’s "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"text":"you can access the value of the ","type":"text"},{"type":"codeVoice","code":"street"},{"type":"text","text":" property through multilevel optional chaining:"}]},{"code":["let johnsAddress = Address()","johnsAddress.buildingName = \"The Larches\"","johnsAddress.street = \"Laurel Street\"","john.residence?.address = johnsAddress","","if let johnsStreet = john.residence?.address?.street {","    print(\"John's street name is \\(johnsStreet).\")","} else {","    print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"John's street name is Laurel Street.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the attempt to set the "},{"code":"address","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" will succeed,"},{"text":" ","type":"text"},{"type":"text","text":"because the value of "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"currently contains a valid "},{"code":"Residence","type":"codeVoice"},{"text":" instance.","type":"text"}]},{"level":2,"text":"Chaining on Methods with Optional Return Values","anchor":"Chaining-on-Methods-with-Optional-Return-Values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The previous example shows how to retrieve the value of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a property of optional type through optional chaining."},{"text":" ","type":"text"},{"type":"text","text":"You can also use optional chaining to call a method that returns a value of optional type,"},{"text":" ","type":"text"},{"text":"and to chain on that method’s return value if needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The example below calls the ","type":"text"},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class’s "},{"code":"buildingIdentifier()","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"through optional chaining. This method returns a value of type "},{"code":"String?","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"As described above, the ultimate return type of this method call after optional chaining","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is also "},{"type":"codeVoice","code":"String?"},{"text":":","type":"text"}]},{"type":"codeListing","code":["if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {","    print(\"John's building identifier is \\(buildingIdentifier).\")","}","\/\/ Prints \"John's building identifier is The Larches.\""],"syntax":"swift"},{"inlineContent":[{"text":"If you want to perform further optional chaining on this method’s return value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"place the optional chaining question mark "},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"type":"text","text":" the method’s parentheses:"}],"type":"paragraph"},{"code":["if let beginsWithThe =","    john.residence?.address?.buildingIdentifier()?.hasPrefix(\"The\") {","    if beginsWithThe {","        print(\"John's building identifier begins with \\\"The\\\".\")","    } else {","        print(\"John's building identifier doesn't begin with \\\"The\\\".\")","    }","}","\/\/ Prints \"John's building identifier begins with \"The\".\""],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"you place the optional chaining question mark "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the parentheses,"},{"text":" ","type":"text"},{"text":"because the optional value you are chaining on is","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"buildingIdentifier()","type":"codeVoice"},{"type":"text","text":" method’s return value,"},{"type":"text","text":" "},{"type":"text","text":"and not the "},{"code":"buildingIdentifier()","type":"codeVoice"},{"text":" method itself.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping":{"type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/optionalchaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","title":"Optional Chaining as an Alternative to Forced Unwrapping","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","abstract":[],"title":"Accessing Properties Through Optional Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-Without-Return-Values":{"type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/functions#Functions-Without-Return-Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values","title":"Functions Without Return Values","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","url":"\/documentation\/the-swift-programming-language","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)"}}}