{"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"kind":"article","primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A class can ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"text":"from another class.","type":"text"},{"type":"text","text":" "},{"text":"When one class inherits from another,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the class it inherits from is known as its "},{"inlineContent":[{"text":"superclass","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Inheritance is a fundamental behavior that differentiates classes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"text":" ","type":"text"},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"text":" ","type":"text"},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"text":" ","type":"text"},{"text":"to refine or modify their behavior.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"text":" ","type":"text"},{"text":"by checking that the override definition has a matching superclass definition.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"text":" ","type":"text"},{"text":"in order to be notified when the value of a property changes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Property observers can be added to any property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}]},{"anchor":"Defining-a-Base-Class","level":2,"text":"Defining a Base Class","type":"heading"},{"inlineContent":[{"text":"Any class that doesn’t inherit from another class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"base class"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"type":"text","text":" "},{"type":"text","text":"Classes you define without specifying a superclass"},{"type":"text","text":" "},{"text":"automatically become base classes for you to build upon.","type":"text"}]}],"name":"Note"},{"inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" (inferring a property type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"currentSpeed"},{"text":" property’s value is used by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a read-only computed "},{"type":"codeVoice","code":"String"},{"text":" property called ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" "},{"text":"to create a description of the vehicle.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" base class also defines a method called ","type":"text"},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This method doesn’t actually do anything for a base ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" later on:"}]},{"syntax":"swift","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"You create a new instance of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" with ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer syntax"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which is written as a type name followed by empty parentheses:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someVehicle = Vehicle()"]},{"type":"paragraph","inlineContent":[{"text":"Having created a new ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"you can access its ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"type":"text","text":" "},{"text":"a human-readable description of the vehicle’s current speed:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" class defines common characteristics for an arbitrary vehicle,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but isn’t much use in itself."},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"text":" ","type":"text"},{"text":"you need to refine it to describe more specific kinds of vehicles.","type":"text"}]},{"text":"Subclassing","type":"heading","anchor":"Subclassing","level":2},{"inlineContent":[{"inlineContent":[{"text":"Subclassing","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the act of basing a new class on an existing class."},{"text":" ","type":"text"},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"text":"You can also add new characteristics to the subclass.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To indicate that a subclass has a superclass,","type":"text"},{"text":" ","type":"text"},{"text":"write the subclass name before the superclass name,","type":"text"},{"text":" ","type":"text"},{"text":"separated by a colon:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"]},{"inlineContent":[{"text":"The following example defines a subclass called ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"text":"The new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" class automatically gains all of the characteristics of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as its "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"text":" properties and its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"text":" method.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" class defines a new stored property,","type":"text"},{"type":"text","text":" "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"(inferring a type of "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" for the property)."}]},{"inlineContent":[{"text":"By default, any new ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":" instance you create will not have a basket.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can set the "},{"type":"codeVoice","code":"hasBasket"},{"text":" property to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after that instance is created:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","bicycle.hasBasket = true"]},{"type":"paragraph","inlineContent":[{"text":"You can also modify the inherited ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"]},{"inlineContent":[{"type":"text","text":"Subclasses can themselves be subclassed."},{"type":"text","text":" "},{"text":"The next example creates a subclass of ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" for a two-seater bicycle"},{"type":"text","text":" "},{"type":"text","text":"known as a “tandem”:"}],"type":"paragraph"},{"code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"code":"Tandem","type":"codeVoice"},{"text":" inherits all of the properties and methods from ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which in turn inherits all of the properties and methods from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"text":" subclass also adds a new stored property called ","type":"text"},{"code":"currentNumberOfPassengers","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you create an instance of ","type":"text"},{"code":"Tandem","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you can work with any of its new and inherited properties,"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"type":"codeVoice","code":"description"},{"text":" property it inherits from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"anchor":"Overriding","type":"heading","level":2,"text":"Overriding"},{"type":"paragraph","inlineContent":[{"text":"A subclass can provide its own custom implementation of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"text":"that it would otherwise inherit from a superclass.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"inlineContent":[{"type":"text","text":"overriding"}],"type":"emphasis"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"To override a characteristic that would otherwise be inherited,","type":"text"},{"type":"text","text":" "},{"text":"you prefix your overriding definition with the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Doing so clarifies that you intend to provide an override"},{"type":"text","text":" "},{"text":"and haven’t provided a matching definition by mistake.","type":"text"},{"type":"text","text":" "},{"text":"Overriding by accident can cause unexpected behavior,","type":"text"},{"type":"text","text":" "},{"text":"and any overrides without the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diagnosed as an error when your code is compiled."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"text":" ","type":"text"},{"text":"to check that your overriding class’s superclass (or one of its parents)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has a declaration that matches the one you provided for the override."},{"text":" ","type":"text"},{"text":"This check ensures that your overriding definition is correct.","type":"text"}]},{"text":"Accessing Superclass Methods, Properties, and Subscripts","type":"heading","level":3,"anchor":"Accessing-Superclass-Methods-Properties-and-Subscripts"},{"inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass,"},{"text":" ","type":"text"},{"type":"text","text":"it’s sometimes useful to use the existing superclass implementation"},{"type":"text","text":" "},{"text":"as part of your override.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"type":"text","text":" "},{"type":"text","text":"or store a modified value in an existing inherited variable."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Where this is appropriate,","type":"text"},{"type":"text","text":" "},{"text":"you access the superclass version of a method, property, or subscript","type":"text"},{"text":" ","type":"text"},{"text":"by using the ","type":"text"},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden method named ","type":"text"},{"type":"codeVoice","code":"someMethod()"},{"text":" can call the superclass version of ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"type":"text","text":" "},{"text":"by calling ","type":"text"},{"code":"super.someMethod()","type":"codeVoice"},{"type":"text","text":" within the overriding method implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden property called "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" can access the superclass version of "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"super.someProperty"},{"text":" within the overriding getter or setter implementation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden subscript for ","type":"text"},{"type":"codeVoice","code":"someIndex"},{"text":" can access the superclass version of the same subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as "},{"code":"super[someIndex]","type":"codeVoice"},{"text":" from within the overriding subscript implementation.","type":"text"}]}]}]},{"type":"heading","anchor":"Overriding-Methods","level":3,"text":"Overriding Methods"},{"type":"paragraph","inlineContent":[{"text":"You can override an inherited instance or type method","type":"text"},{"text":" ","type":"text"},{"text":"to provide a tailored or alternative implementation of the method within your subclass.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new subclass of "},{"code":"Vehicle","type":"codeVoice"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"text":" method that ","type":"text"},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"code":"Vehicle","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new instance of "},{"type":"codeVoice","code":"Train"},{"text":" and call its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"you can see that the ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" subclass version of the method is called:","type":"text"}]},{"code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Overriding-Properties","level":3,"text":"Overriding Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"text":" ","type":"text"},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"or to add property observers to enable the overriding property"},{"type":"text","text":" "},{"type":"text","text":"to observe when the underlying property value changes."}]},{"text":"Overriding Property Getters and Setters","type":"heading","anchor":"Overriding-Property-Getters-and-Setters","level":4},{"inlineContent":[{"text":"You can provide a custom getter (and setter, if appropriate)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to override "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" inherited property,"},{"text":" ","type":"text"},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"type":"text","text":" "},{"text":"a stored or computed property at source.","type":"text"},{"text":" ","type":"text"},{"text":"The stored or computed nature of an inherited property isn’t known by a subclass —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it only knows that the inherited property has a certain name and type."},{"text":" ","type":"text"},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"text":"to enable the compiler to check that your override matches","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a superclass property with the same name and type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"text":" ","type":"text"},{"text":"by providing both a getter and a setter in your subclass property override.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"type":"text","text":"you must also provide a getter for that override."},{"text":" ","type":"text"},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can simply pass through the inherited value"},{"text":" ","type":"text"},{"type":"text","text":"by returning "},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is the name of the property you are overriding."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"code":"gear","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide a custom description that includes the current gear:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The override of the ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property starts by calling "},{"code":"super.description","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which returns the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"type":"text","text":" then adds some extra text onto"},{"text":" ","type":"text"},{"type":"text","text":"the end of this description to provide information about the current gear."}]},{"type":"paragraph","inlineContent":[{"text":"If you create an instance of the ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":" class","type":"text"},{"type":"text","text":" "},{"text":"and set its ","type":"text"},{"code":"gear","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"you can see that its "},{"code":"description","type":"codeVoice"},{"text":" property returns","type":"text"},{"type":"text","text":" "},{"text":"the tailored description defined within the ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"anchor":"Overriding-Property-Observers","type":"heading","level":4,"text":"Overriding Property Observers"},{"type":"paragraph","inlineContent":[{"text":"You can use property overriding to add property observers to an inherited property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"text":" ","type":"text"},{"text":"regardless of how that property was originally implemented.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information on property observers, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true},{"text":".","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"type":"text","text":" "},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"text":" ","type":"text"},{"text":"The value of these properties can’t be set,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"code":"willSet","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation"},{"type":"text","text":" "},{"text":"as part of an override.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note also that you can’t provide both","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"text":" ","type":"text"},{"text":"you can simply observe any value changes from within the custom setter.","type":"text"}]}],"type":"aside","style":"note"},{"inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"type":"codeVoice","code":"AutomaticCar"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"type":"text","text":" "},{"text":"which automatically selects an appropriate gear to use based on the current speed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you set the "},{"type":"codeVoice","code":"currentSpeed"},{"text":" property of an ","type":"text"},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"the property’s ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observer sets the instance’s ","type":"text"},{"type":"codeVoice","code":"gear"},{"text":" property to","type":"text"},{"type":"text","text":" "},{"text":"an appropriate choice of gear for the new speed.","type":"text"},{"text":" ","type":"text"},{"text":"Specifically, the property observer chooses a gear that’s","type":"text"},{"type":"text","text":" "},{"text":"the new ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"type":"codeVoice","code":"10"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"rounded down to the nearest integer, plus ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A speed of ","type":"text"},{"type":"codeVoice","code":"35.0"},{"text":" produces a gear of ","type":"text"},{"code":"4","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Preventing-Overrides","text":"Preventing Overrides"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can prevent a method, property, or subscript from being overridden"},{"type":"text","text":" "},{"text":"by marking it as ","type":"text"},{"inlineContent":[{"text":"final","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Do this by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before"},{"text":" ","type":"text"},{"text":"the method, property, or subscript’s introducer keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"code":"final var","type":"codeVoice"},{"text":", ","type":"text"},{"code":"final func","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"final subscript"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any attempt to override a final method, property, or subscript in a subclass"},{"text":" ","type":"text"},{"type":"text","text":"is reported as a compile-time error."},{"type":"text","text":" "},{"text":"Methods, properties, or subscripts that you add to a class in an extension","type":"text"},{"text":" ","type":"text"},{"text":"can also be marked as final within the extension’s definition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to subclass a final class is reported as a compile-time error."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"title":"Inheritance"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","title":"Property Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","title":"Extensions","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","url":"\/documentation\/the-swift-programming-language","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)"}}}